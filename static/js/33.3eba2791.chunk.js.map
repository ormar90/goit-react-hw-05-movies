{"version":3,"file":"static/js/33.3eba2791.chunk.js","mappings":"sRAGaA,GAAOC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,wLAYJE,EAAmBF,EAAAA,GAAAA,IAAH,iGAOhBG,EAAoBH,EAAAA,GAAAA,IAAH,mFAMjBI,GAAaJ,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,uH,SCsCvB,EA5DqB,WAAO,IAAD,IAEzB,GAAwCK,EAAAA,EAAAA,UAAS,MAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MAejB,IAbAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAW,mCAAG,8GAEKC,EAAAA,EAAAA,IAAgBN,GAFrB,OAEVO,EAFU,OAIhBR,EAAgBQ,GAJA,gDAMhBC,QAAQC,IAAI,KAAMC,SANF,yDAAH,qDASjBL,GACD,GAAE,CAACL,KAECF,EACH,OAAO,KAET,IAAQa,EAAuDb,EAAvDa,YAAaC,EAA0Cd,EAA1Cc,MAAOC,EAAmCf,EAAnCe,aAAcC,EAAqBhB,EAArBgB,SAAUC,EAAWjB,EAAXiB,OAEpD,OACE,iCACE,SAACpB,EAAD,WACE,SAACC,EAAD,CAAYoB,GAAE,oBAAEd,EAASe,aAAX,aAAE,EAAgBC,YAAlB,QAA0B,UAAxC,wBAEF,gBAAKC,IAAG,UA5BI,oCA4BJ,OAAeR,GAAeS,IAAI,GAAGC,MAAM,SACnD,4BACE,wBAAKT,KACL,uBAAIC,KACJ,sCACA,uBAAIC,KACJ,oCACA,uBACGC,EAAOO,KAAI,SAAAC,GAAK,OACf,4BAAsBA,EAAMC,KAA5B,MAAWD,EAAME,GADF,UAKrB,4BACE,mDACA,UAAC/B,EAAD,YACE,SAACH,EAAD,CAAMyB,GAAG,OAAOQ,KAAM1B,EAAa2B,GAAnC,mBAGA,SAAClC,EAAD,CAAMyB,GAAG,UAAUQ,KAAM1B,EAAa2B,GAAtC,4BAKJ,SAAC,EAAAC,SAAD,CAAUC,UAAU,wCAApB,UACE,SAAC,KAAD,QAIP,C,8LC9DKC,EAAW,gCACXC,EAAU,mCAEVC,EAAW,mCAAG,sGACKC,EAAAA,GAAAA,IAAA,UAClBH,EADkB,sCACoBC,EADpB,YADL,uBACVG,EADU,EACVA,KADU,kBAIXA,GAJW,2CAAH,qDAOXC,EAAY,mCAAG,WAAMC,GAAN,yFACIH,EAAAA,GAAAA,IAAA,UAClBH,EADkB,gCACcC,EADd,iCAC8CK,EAD9C,gCADJ,uBACXF,EADW,EACXA,KADW,kBAIZA,GAJY,2CAAH,sDAOZ1B,EAAe,mCAAG,WAAMmB,GAAN,yFACCM,EAAAA,GAAAA,IAAA,UAClBH,EADkB,iBACDH,EADC,oBACaI,EADb,oBADD,uBACdG,EADc,EACdA,KADc,kBAIfA,GAJe,2CAAH,sDAMfG,EAAe,mCAAG,WAAMV,GAAN,yFACCM,EAAAA,GAAAA,IAAA,UAClBH,EADkB,iBACDH,EADC,4BACqBI,EADrB,oBADD,uBACdG,EADc,EACdA,KADc,kBAIfA,GAJe,2CAAH,sDAOfI,EAAe,mCAAG,WAAMX,GAAN,yFACCM,EAAAA,GAAAA,IAAA,UAClBH,EADkB,iBACDH,EADC,6BACsBI,EADtB,oBADD,uBACdG,EADc,EACdA,KADc,kBAIfA,GAJe,2CAAH,qD","sources":["pages/MovieDetails/MovieDetails.styled.js","pages/MovieDetails/MovieDetails.jsx","services/API.js"],"sourcesContent":["import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const Link = styled(NavLink)`\n  text-decoration: none;\n  color: black;\n  background-color: gray;\n  padding: 8px 16px;\n\n  &.active {\n    color: red;\n    background-color: brown;\n  }\n`;\n\nexport const AboutLinkWrapper = styled.div`\n  height: 60px;\n  display: flex;\n  gap: 16px;\n  align-items: center;\n`;\n\nexport const GoBackLinkWrapper = styled.div`\n  height: 60px;\n  display: flex;\n  align-items: center;\n`;\n\nexport const GoBackLink = styled(NavLink)`   \n  text-decoration: none;\n  color: black;\n  background-color: gray;\n  padding: 8px 16px;\n`;\n","import { Suspense } from 'react';\nimport { useState, useEffect } from 'react';\nimport { Outlet, useLocation, useParams } from 'react-router-dom';\nimport { getMovieDetails } from 'services/API';\nimport { AboutLinkWrapper, GoBackLink, GoBackLinkWrapper, Link } from './MovieDetails.styled';\n\nconst MovieDetails = () => {\n  const IMG_URL = 'https://image.tmdb.org/t/p/w500/';\n  const [movieDetails, setMovieDetails] = useState(null);\n  const { movieId } = useParams();\n  const location = useLocation();\n\n  useEffect(() => {\n    const fetchMovies = async () => {\n      try {\n        const result = await getMovieDetails(movieId);\n\n        setMovieDetails(result);\n      } catch (error) {\n        console.log(error.message);\n      }\n    };\n    fetchMovies();\n  }, [movieId]);\n\n  if (!movieDetails) {\n    return null;\n  }\n  const { poster_path, title, release_date, overview, genres } = movieDetails;\n\n  return (\n    <>\n      <GoBackLinkWrapper>\n        <GoBackLink to={location.state?.from ?? '/movies'}>Go Back</GoBackLink>\n      </GoBackLinkWrapper>\n      <img src={`${IMG_URL}${poster_path}`} alt=\"\" width=\"300\" />\n      <div>\n        <h1>{title}</h1>\n        <p>{release_date}</p>\n        <h3>Overview</h3>\n        <p>{overview}</p>\n        <h3>Genres</h3>\n        <p>\n          {genres.map(genre => (\n            <span key={genre.id}>{genre.name} </span>\n          ))}\n        </p>\n      </div>\n      <div>\n        <p>Adittional information</p>\n        <AboutLinkWrapper>\n          <Link to=\"cast\" name={movieDetails.id}>\n            Cast\n          </Link>\n          <Link to=\"reviews\" name={movieDetails.id}>\n            Reviews\n          </Link>\n        </AboutLinkWrapper>\n      </div>\n      <Suspense fallback={<div>Loading...</div>}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '248eab561af730ae2789760eff8bc947';\n\nconst getTrending = async () => {\n  const { data } = await axios.get(\n    `${BASE_URL}trending/movie/day?api_key=${API_KEY}&page=1`\n  );\n  return data;\n};\n\nconst searchMovies = async query => {\n  const { data } = await axios.get(\n    `${BASE_URL}search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n  );\n  return data;\n};\n\nconst getMovieDetails = async id => {\n  const { data } = await axios.get(\n    `${BASE_URL}movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n  return data;\n};\nconst getMovieCredits = async id => {\n  const { data } = await axios.get(\n    `${BASE_URL}movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return data;\n};\n\nconst getMovieRewievs = async id => {\n  const { data } = await axios.get(\n    `${BASE_URL}movie/${id}//reviews?api_key=${API_KEY}&language=en-US`\n  );\n  return data;\n};\n\nexport {\n  getTrending,\n  searchMovies,\n  getMovieDetails,\n  getMovieCredits,\n  getMovieRewievs,\n};\n"],"names":["Link","styled","NavLink","AboutLinkWrapper","GoBackLinkWrapper","GoBackLink","useState","movieDetails","setMovieDetails","movieId","useParams","location","useLocation","useEffect","fetchMovies","getMovieDetails","result","console","log","message","poster_path","title","release_date","overview","genres","to","state","from","src","alt","width","map","genre","name","id","Suspense","fallback","BASE_URL","API_KEY","getTrending","axios","data","searchMovies","query","getMovieCredits","getMovieRewievs"],"sourceRoot":""}